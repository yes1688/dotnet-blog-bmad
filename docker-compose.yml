version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: dotnet-blog-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-blogdb}
      POSTGRES_USER: ${DB_USER:-bloguser}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-changeme123}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-bloguser} -d ${DB_NAME:-blogdb}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - blog-network

  # ASP.NET Core Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: dotnet-blog-app
    restart: unless-stopped
    environment:
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT:-Development}
      ASPNETCORE_URLS: http://+:8080
      ConnectionStrings__DefaultConnection: "Host=db;Port=5432;Database=${DB_NAME:-blogdb};Username=${DB_USER:-bloguser};Password=${DB_PASSWORD:-changeme123}"
      Authentication__Google__ClientId: ${GOOGLE_CLIENT_ID}
      Authentication__Google__ClientSecret: ${GOOGLE_CLIENT_SECRET}
      Security__AdminWhitelist: ${ADMIN_WHITELIST}
    ports:
      - "${APP_PORT:-5000}:8080"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - blog-network
    volumes:
      # Mount source code for development (comment out for production)
      - .:/app/source:ro

networks:
  blog-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
